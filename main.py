import random
import tkinter as tk
from tkinter import messagebox, ttk
import random
from colorama import Fore, Style

# –ü—Ä–æ—Ü–µ—Å—Å –∏–≥—Ä—ã
def play():
    secret_num = generate_number()
    
    print(f"\n{Fore.CYAN}–ß–∏—Å–ª–æ –∑–∞–≥–∞–¥–∞–Ω–æ! –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å –µ–≥–æ.{Style.RESET_ALL}")

    attempts = 0
    while True:
        try:
            guess_input = input("–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ: ").strip()
            
            if len(guess_input) != 4 or not guess_input.isdigit():
                print(f"{Fore.RED}–í–≤–µ–¥–∏—Ç–µ —Ä–æ–≤–Ω–æ 4 —Ü–∏—Ñ—Ä—ã!{Style.RESET_ALL}")
                continue

            attempts += 1

            # –ü—Ä–æ–≤–µ—Ä–∏–º, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫
            if guess_input == secret_num:
                print(f"{Fore.GREEN}üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É–≥–∞–¥–∞–ª–∏ —á–∏—Å–ª–æ {secret_num} –∑–∞ {attempts} –ø–æ–ø—ã—Ç–æ–∫!{Style.RESET_ALL}")
                break

            # –ü–æ–¥—Å—á—ë—Ç —Ü–≤–µ—Ç–æ–≤ —Å —É—á—ë—Ç–æ–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
            result_colors = evaluate_guess(guess_input, secret_num)

            # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç —Å —Ü–≤–µ—Ç–∞–º–∏
            colored_output = ""
            for char, color in zip(guess_input, result_colors):
                if color == 'green':
                    colored_output += f"{Fore.GREEN}{char}{Style.RESET_ALL}"
                elif color == 'yellow':
                    colored_output += f"{Fore.YELLOW}{char}{Style.RESET_ALL}"
                else:  # red
                    colored_output += f"{Fore.RED}{char}{Style.RESET_ALL}"

            print("–†–µ–∑—É–ª—å—Ç–∞—Ç: " + colored_output + "\n")

        except KeyboardInterrupt:
            print(f"\n{Fore.RED}\n–ò–≥—Ä–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞. –ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –±—ã–ª–æ: {secret_num}{Style.RESET_ALL}")
            break
        except Exception as e:
            print(f"{Fore.RED}–û—à–∏–±–∫–∞: {e}{Style.RESET_ALL}")
    return secret_num

# –û–∫—Ä–∞—à–∏–≤–∞–µ–º —Ü–∏—Ñ—Ä—ã
def evaluate_guess(guess, secret):
    # –°–æ–∑–¥–∞—ë–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –º–µ—Ç–æ–∫ –∏ –ø–æ–¥—Å—á—ë—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ü–∏—Ñ—Ä
    result = ['red'] * 4
    secret_list = list(secret)  # —á—Ç–æ–±—ã –æ—Ç–º–µ—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–∏—Ñ—Ä—ã

    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–º–µ—á–∞–µ–º –∑–µ–ª—ë–Ω—ã–µ (–Ω–∞ —Å–≤–æ–∏—Ö –º–µ—Å—Ç–∞—Ö)
    for i in range(4):
        if guess[i] == secret[i]:
            result[i] = 'green'
            secret_list[i] = None  # "–∏—Å–ø–æ–ª—å–∑—É–µ–º" —ç—Ç—É —Ü–∏—Ñ—Ä—É

    # –¢–µ–ø–µ—Ä—å –∂—ë–ª—Ç—ã–µ: —Ü–∏—Ñ—Ä–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ
    for i in range(4):
        if result[i] != 'green':  # –µ—Å–ª–∏ –µ—â—ë –Ω–µ –∑–µ–ª—ë–Ω–∞—è
            if guess[i] in secret_list:
                result[i] = 'yellow'
                # "–∏—Å–ø–æ–ª—å–∑—É–µ–º" –ø–µ—Ä–≤—É—é –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ü–∏—Ñ—Ä—É
                secret_list[secret_list.index(guess[i])] = None

    return result

# –í—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
def main():
    while True:
        print(f"\n{Fore.CYAN}{Style.BRIGHT}--- –ú–ï–ù–Æ ---")
        print(f"{Fore.GREEN}1. {Fore.YELLOW}–°—Ç–∞—Ä—Ç")
        print(f"{Fore.GREEN}2. {Fore.LIGHTBLUE_EX}–ò–Ω—Ñ–æ")
        print(f"{Fore.GREEN}3. {Fore.RED}–í—ã—Ö–æ–¥")
        choice = input(f"{Fore.CYAN}–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: {Style.RESET_ALL}")
        # –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
        if choice == "1":
            print(f"{Fore.YELLOW}–í—ã –≤—ã–±—Ä–∞–ª–∏: {Fore.LIGHTYELLOW_EX}–°—Ç–∞—Ä—Ç{Style.RESET_ALL}")
            gues_num = play()
            print(f"{Fore.MAGENTA}–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —á–∏—Å–ª–æ: {Fore.LIGHTMAGENTA_EX}{gues_num}{Style.RESET_ALL}")
            input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Style.RESET_ALL}")
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∏–≥—Ä–µ
        elif choice == "2":
            print(f"{Fore.BLUE}–í—ã –≤—ã–±—Ä–∞–ª–∏: {Fore.LIGHTBLUE_EX}–ò–Ω—Ñ–æ{Style.RESET_ALL}")
            print(f"{Fore.LIGHTWHITE_EX}–≠—Ç–æ –∏–≥—Ä–∞, –≥–¥–µ –Ω—É–∂–Ω–æ —É–≥–∞–¥–∞—Ç—å —á–∏—Å–ª–æ –æ—Ç {Fore.GREEN}0{Fore.LIGHTWHITE_EX} –¥–æ {Fore.RED}9999{Fore.LIGHTWHITE_EX}.{Style.RESET_ALL}")
            print(f"{Fore.GREEN}‚óè –ó–µ–ª—ë–Ω—ã–π{Style.RESET_ALL} ‚Äî –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ü–∏—Ñ—Ä–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –º–µ—Å—Ç–µ.")
            print(f"{Fore.YELLOW}‚óè –ñ—ë–ª—Ç—ã–π{Style.RESET_ALL} ‚Äî —Ü–∏—Ñ—Ä–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ.")
            print(f"{Fore.RED}‚óè –ö—Ä–∞—Å–Ω—ã–π{Style.RESET_ALL} ‚Äî —Ü–∏—Ñ—Ä—ã –Ω–µ—Ç –≤ —á–∏—Å–ª–µ.\n")
            input(f"{Fore.CYAN}–ù–∞–∂–º–∏—Ç–µ Enter –∏–ª–∏ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...{Style.RESET_ALL}")
        # –í—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
        elif choice == "3":
            print(f"{Fore.RED}–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã...{Style.RESET_ALL}")
            break
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        else:
            print(f"{Fore.RED}–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3.{Style.RESET_ALL}")
        print("")

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —á–∏—Å–ª–∞
def generate_number():
    guessing_number = random.randrange(1000, 10000)
    return str(guessing_number)

# GUI –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
class NumberGuessingGame:
    def __init__(self, root):
        self.root = root
        self.root.title("–£–≥–∞–¥–∞–π —á–∏—Å–ª–æ")
        self.root.geometry("800x700")
        self.root.state('zoomed')  # –ü–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω (Windows/Linux)
        self.root.configure(bg="#121212")

        self.secret_num = ""
        self.attempts = 0
        self.guess_history = []

        self.setup_ui()

    def setup_ui(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = tk.Label(self.root, text="üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ", font=("Helvetica", 24, "bold"),
                         fg="cyan", bg="#1e1e1e")
        title.pack(pady=20)

        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
        subtitle = tk.Label(self.root, text="–í–≤–µ–¥–∏—Ç–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å' –∏–ª–∏ Enter",
                            font=("Arial", 12), fg="lightgray", bg="#1e1e1e")
        subtitle.pack(pady=5)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞
        self.entry = tk.Entry(self.root, font=("Arial", 18), justify='center', width=10,
                              bg="#333", fg="white", insertbackground="white")
        self.entry.pack(pady=15)
        self.entry.focus()

        # –ü—Ä–∏–≤—è–∑–∫–∞ Enter
        self.entry.bind("<Return>", lambda event: self.check_guess())

        # –ö–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        button_frame = tk.Frame(self.root, bg="#1e1e1e")
        button_frame.pack(pady=10)

        self.submit_btn = tk.Button(button_frame, text="‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å", font=("Arial", 12),
                                    bg="#007acc", fg="white", width=12, command=self.check_guess)
        self.submit_btn.grid(row=0, column=0, padx=5)

        info_btn = tk.Button(button_frame, text="‚ÑπÔ∏è –ò–Ω—Ñ–æ", font=("Arial", 12),
                             bg="#FF9800", fg="white", width=12, command=self.show_info)
        info_btn.grid(row=0, column=1, padx=5)

        exit_btn = tk.Button(button_frame, text="üö™ –í—ã—Ö–æ–¥", font=("Arial", 12),
                             bg="#f44336", fg="white", width=12, command=self.root.quit)
        exit_btn.grid(row=0, column=2, padx=5)

        # –°—á—ë—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫
        self.attempts_label = tk.Label(self.root, text="–ü–æ–ø—ã—Ç–∫–∏: 0", font=("Arial", 14),
                                       fg="yellow", bg="#1e1e1e")
        self.attempts_label.pack(pady=5)

        # –ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫
        history_title = tk.Label(self.root, text="–ò—Å—Ç–æ—Ä–∏—è –ø–æ–ø—ã—Ç–æ–∫:", font=("Arial", 14, "bold"),
                                 fg="white", bg="#1e1e1e")
        history_title.pack(pady=(20, 5))

        # Canvas + Frame –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
        canvas = tk.Canvas(self.root, bg="#1f1f1f", height=200, highlightthickness=0)
        scrollbar = tk.Scrollbar(self.root, orient="vertical", command=canvas.yview)
        self.history_frame = tk.Frame(canvas, bg="#2a2a2a")

        self.history_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=self.history_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="top", fill="both", expand=True, padx=40, pady=5)
        scrollbar.pack(side="right", fill="y")

        # --- –ü–∞–Ω–µ–ª—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ (–≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è) ---
        self.info_frame = tk.Frame(self.root, bg="#254", bd=2, relief="solid")
        info_text = (
            " üéØ –£–≥–∞–¥–∞–π—Ç–µ 4-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1000 –¥–æ 9999\n\n"
            " üü¢ –ó–µ–ª—ë–Ω—ã–π ‚Äî —Ü–∏—Ñ—Ä–∞ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ\n"
            " üü° –ñ—ë–ª—Ç—ã–π ‚Äî —Ü–∏—Ñ—Ä–∞ –µ—Å—Ç—å, –Ω–æ –Ω–µ –Ω–∞ —Å–≤–æ—ë–º –º–µ—Å—Ç–µ\n"
            " üî¥ –ö—Ä–∞—Å–Ω—ã–π ‚Äî —Ü–∏—Ñ—Ä—ã –Ω–µ—Ç –≤ —á–∏—Å–ª–µ\n"
        )
        self.info_label = tk.Label(
            self.info_frame,
            text=info_text,
            font=("Arial", 11),
            fg="#b8f6d6",
            bg="#1f1f1f",
            justify="left",
            anchor="w",
            padx=15,
            pady=10
        )
        self.info_label.pack()
        self.info_frame.pack_forget()  # –°–∫—Ä—ã—Ç–æ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ

        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤–∞—è –∏–≥—Ä–∞"
        self.restart_btn = tk.Button(self.root, text="üîÑ –ù–æ–≤–∞—è –∏–≥—Ä–∞", font=("Arial", 12),
                                     bg="#555", fg="white", width=20, command=self.start_game)
        self.restart_btn.pack(pady=10)
        self.restart_btn.pack_forget()  # –°–∫—Ä—ã—Ç–∞ –¥–æ –ø–æ–±–µ–¥—ã

        self.start_game()

    def start_game(self):
        self.secret_num = generate_number()
        self.attempts = 0
        self.guess_history = []
        self.attempts_label.config(text="–ü–æ–ø—ã—Ç–∫–∏: 0")
        self.entry.delete(0, tk.END)
        self.clear_history_display()
        self.submit_btn.config(state=tk.NORMAL)
        self.restart_btn.pack_forget()
        self.entry.focus()
        print(f"[DEBUG] –ó–∞–≥–∞–¥–∞–Ω–æ: {self.secret_num}")

    def clear_history_display(self):
        for widget in self.history_frame.winfo_children():
            widget.destroy()

    def check_guess(self):
        guess_input = self.entry.get().strip()

        if len(guess_input) != 4 or not guess_input.isdigit():
            self.entry.delete(0, tk.END)
            self.entry.focus()
            return

        self.attempts += 1
        self.attempts_label.config(text=f"–ü–æ–ø—ã—Ç–∫–∏: {self.attempts}")

        self.guess_history.append(guess_input)

        if guess_input == self.secret_num:
            self.win()
            return

        colors = evaluate_guess(guess_input, self.secret_num)
        self.display_result_in_history(guess_input, colors)
        self.entry.delete(0, tk.END)
        self.entry.focus()

    def display_result_in_history(self, guess, colors):
        colors_map = {
            'green': '#4CAF50',
            'yellow': '#FFD700',
            'red': '#F44336'
        }

        attempt_frame = tk.Frame(self.history_frame, bg="#2a2a2a")
        attempt_frame.pack(pady=4, anchor="w", padx=10)

        num_label = tk.Label(attempt_frame, text=f"{len(self.guess_history)}. {guess} ‚Üí ",
                             font=("Courier", 12), fg="lightblue", bg="#2a2a2a")
        num_label.pack(side=tk.LEFT)

        color_frame = tk.Frame(attempt_frame, bg="#2a2a2a")
        color_frame.pack(side=tk.LEFT)

        for char, color in zip(guess, colors):
            label = tk.Label(color_frame, text=char, font=("Courier", 14, "bold"),
                             bg=colors_map[color], fg="white", width=2, height=1)
            label.pack(side=tk.LEFT, padx=1)

    def win(self):
        self.submit_btn.config(state=tk.DISABLED)
        self.display_result_in_history(self.secret_num, ['green'] * 4)
        self.restart_btn.pack()

    def show_info(self):
        if self.info_frame.winfo_ismapped():
            self.info_frame.pack_forget()
        else:
            self.info_frame.pack(pady=10)
        self.entry.focus()


# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    root = tk.Tk()
    app = NumberGuessingGame(root)
    root.mainloop()